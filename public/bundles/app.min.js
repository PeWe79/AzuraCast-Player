/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\n/**\n * Main app JS entry file.\n */\n\n__webpack_require__(/*! ./scss/app.scss */ \"./src/scss/app.scss\");\n\n__webpack_require__(/*! ./js/filters */ \"./src/js/filters.js\");\n\n__webpack_require__(/*! ./js/favorite */ \"./src/js/favorite.js\");\n\nvar _soma = _interopRequire(__webpack_require__(/*! ./js/soma */ \"./src/js/soma.js\"));\n\nvar _audio = _interopRequire(__webpack_require__(/*! ./js/audio */ \"./src/js/audio.js\"));\n\nvar _scene = _interopRequire(__webpack_require__(/*! ./js/scene */ \"./src/js/scene.js\"));\n\nvar _utils = _interopRequire(__webpack_require__(/*! ./js/utils */ \"./src/js/utils.js\"));\n\nvar _store = _interopRequire(__webpack_require__(/*! ./js/store */ \"./src/js/store.js\"));\n\n// main vue app\nnew Vue({\n  el: \"#app\",\n  data: {\n    // toggles\n    init: false,\n    visible: true,\n    playing: false,\n    loading: false,\n    sidebar: false,\n    volume: 100,\n    // sidebar toggles\n    sbActive: false,\n    sbVisible: false,\n    // stations stuff\n    route: \"/\",\n    stations: [],\n    station: {},\n    songs: [],\n    track: {},\n    image: {},\n    favorites: [],\n    errors: {},\n    // timer stuff\n    timeStart: 0,\n    timeDisplay: \"00:00:00\",\n    timeItv: null,\n    // sorting stuff\n    searchText: \"\",\n    sortParam: \"listeners\",\n    sortOrder: \"desc\",\n    // timer stuff\n    anf: null,\n    sto: null,\n    itv: null },\n\n  // watch methods\n  watch: {\n\n    // watch playing status\n    playing: function playing() {\n      if (this.playing) {\n        this.startClock();\n      } else {\n        this.stopClock();\n      }\n    },\n\n    // update player volume\n    volume: function volume() {\n      _audio.setVolume(this.volume);\n    }\n  },\n\n  // computed methods\n  computed: {\n\n    // filter stations list\n    channelsList: function channelsList() {\n      var _this = this;\n\n      var list = this.stations.slice();\n      var search = this.searchText.replace(/[^\\w\\s\\-]+/g, \"\").replace(/[\\r\\s\\t\\n]+/g, \" \").trim();\n\n      if (search && search.length > 1) {\n        list = _utils.search(list, \"title\", search);\n      }\n      if (this.sortParam) {\n        list = _utils.sort(list, this.sortParam, this.sortOrder, false);\n      }\n      if (this.station.shortcode) {\n        list = list.map(function (i) {\n          i.active = _this.station.shortcode === i.shortcode ? true : false;\n          return i;\n        });\n      }\n      return list;\n    },\n\n    // filter songs list\n    songsList: function songsList() {\n      var list = this.songs.slice();\n      return list;\n    },\n\n    // sort-by label for buttons, etc\n    sortLabel: function sortLabel() {\n      switch (this.sortParam) {\n        case \"title\":\n          return \"Station Name\";\n        case \"listeners\":\n          return \"Listeners Count\";\n        case \"favorite\":\n          return \"Saved Favorites\";\n        case \"genre\":\n          return \"Music Genre\";\n      }\n    },\n\n    // check if audio can be played\n    canPlay: function canPlay() {\n      return this.station.shortcode && !this.loading ? true : false;\n    },\n\n    // check if a station is selected\n    hasChannel: function hasChannel() {\n      return this.station.shortcode ? true : false;\n    },\n\n    // check if there are tracks loaded\n    hasSongs: function hasSongs() {\n      return this.songs.length ? true : false;\n    },\n\n    // check for errors that would affect playback\n    hasErrors: function hasErrors() {\n      if (this.errors.support || this.errors.stream) {\n        return true;\n      }if (this.errors.stations && !this.stations.length) {\n        return true;\n      }return false;\n    } },\n\n  // custom methods\n  methods: {\n\n    // run maintenance tasks on a timer\n    setupMaintenance: function setupMaintenance() {\n      var _this = this;\n\n      this.itv = setInterval(function () {\n        _this.getChannels(_this.sidebar); // update stations\n        _this.getSongs(_this.station); // update station tracks\n      }, 1000 * 30);\n    },\n\n    // set an erro message\n    setError: function setError(key, err) {\n      var errors = Object.assign({}, this.errors);\n      errors[key] = String(err || \"\").trim();\n      if (err) console.warn(\"ERROR(\" + key + \"):\", err);\n      this.errors = errors;\n    },\n\n    // clear all error messages\n    clearError: function clearError(key) {\n      var errors = Object.assign({}, this.errors);\n      delete errors[key];\n      this.errors = errors;\n    },\n\n    // check if an error has been set for a key\n    hasError: function hasError(key) {\n      return key && this.errors.hasOwnProperty(key);\n    },\n\n    // flush all errors\n    flushErrors: function flushErrors() {\n      this.errors = {};\n    },\n\n    // show player when app is mounted\n    setupEvents: function setupEvents() {\n      var _this = this;\n\n      document.addEventListener(\"visibilitychange\", function () {\n        _this.visible = document.visibilityState === \"visible\";\n      });\n      window.addEventListener(\"hashchange\", function () {\n        return _this.applyRoute(window.location.hash);\n      });\n      window.addEventListener(\"keydown\", this.onKeyboard);\n      // audio related events\n      _audio.on(\"waiting\", this.onWaiting);\n      _audio.on(\"playing\", this.onPlaying);\n      _audio.on(\"ended\", this.onEnded);\n      _audio.on(\"error\", this.onError);\n    },\n\n    // hide spinner and show player\n    initPlayer: function initPlayer() {\n      var _this = this;\n\n      setTimeout(function () {\n        document.querySelector(\"#_spnr\").style.display = \"none\";\n        document.querySelector(\"#player-wrap\").style.opacity = \"1\";\n        _this.init = true;\n      }, 100);\n    },\n\n    // reset selected station\n    resetPlayer: function resetPlayer() {\n      this.closeAudio();\n      this.flushErrors();\n      this.station = {};\n      this.songs = [];\n    },\n\n    // try resuming stream problem if possible\n    tryAgain: function tryAgain() {\n      if (this.hasError(\"support\")) {\n        this.flushErrors();\n        setTimeout(this.setupAudio, 1);\n      } else {\n        this.flushErrors();\n        this.playChannel(this.station);\n      }\n    },\n\n    // show/hide the sidebar\n    toggleSidebar: function toggleSidebar(toggle) {\n      var _this = this;\n\n      var state = typeof toggle === \"boolean\" ? toggle : false;\n      if (state) {\n        this.sbActive = true; // bring to front\n        this.sbVisible = true; // show drawer\n        this.$refs.sidebarDrawer.focus();\n      } else {\n        this.sbVisible = false;\n        setTimeout(function () {\n          _this.sbActive = false;\n        }, 500);\n      }\n    },\n\n    // toggle stream playback for current selected station\n    togglePlay: function togglePlay(e) {\n      e && e.preventDefault();\n      if (this.loading) {\n        return;\n      }if (this.playing) {\n        return this.closeAudio();\n      }this.playChannel(this.station);\n    },\n\n    // save volume to store\n    saveVolume: function saveVolume() {\n      _store.set(\"player_volume\", this.volume);\n    },\n\n    // load saved volume from store\n    loadVolume: function loadVolume() {\n      var vol = parseInt(_store.get(\"player_volume\")) || 100;\n      this.volume = vol;\n    },\n\n    // load last sort options from store\n    loadSortOptions: function loadSortOptions() {\n      var opts = _store.get(\"sorting_data\");\n      if (opts && opts.param) this.sortParam = opts.param;\n      if (opts && opts.order) this.sortOrder = opts.order;\n    },\n\n    // toggle sort order\n    toggleSortOrder: function toggleSortOrder() {\n      this.sortOrder = this.sortOrder === \"asc\" ? \"desc\" : \"asc\";\n    },\n\n    // apply sorting and toggle order\n    sortBy: function sortBy(param, order) {\n      if (this.sortParam === param) {\n        this.toggleSortOrder();\n      } else {\n        this.sortOrder = order || \"asc\";\n      }\n      this.sortParam = param;\n      _store.set(\"sorting_data\", { param: this.sortParam, order: this.sortOrder });\n    },\n\n    // load saved favs list from store\n    loadFavorites: function loadFavorites() {\n      var favs = _store.get(\"favorites_data\");\n      if (!Array.isArray(favs)) {\n        return;\n      }this.favorites = favs;\n    },\n\n    // save favs to a .m3u file\n    saveFavorites: function saveFavorites() {\n      var _this = this;\n\n      var data = \"#EXTM3U\";\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.favorites[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _ret = (function () {\n            var id = _step.value;\n\n            var station = _this.stations.filter(function (c) {\n              return c.shortcode === id;\n            }).shift();\n            if (!station) return \"continue\";\n            data += \"\\n\\n\";\n            data += \"#EXTINF:0,\" + station.title + \" [AzuraCast]\\n\";\n            data += \"\" + station.mp3file;\n          })();\n\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var elm = document.createElement(\"a\");\n      elm.setAttribute(\"href\", \"data:audio/mpegurl;charset=utf-8,\" + encodeURIComponent(data));\n      elm.setAttribute(\"download\", \"azuracast_favorites.m3u\");\n      elm.setAttribute(\"target\", \"_blank\");\n      document.body.appendChild(elm);\n      setTimeout(function () {\n        return elm.click();\n      }, 100);\n      setTimeout(function () {\n        return elm.remove();\n      }, 1000);\n    },\n\n    // toggle favorite station by id\n    toggleFavorite: function toggleFavorite(id, toggle) {\n      var favs = this.favorites.slice();\n      favs = favs.filter(function (fid) {\n        return fid !== id;\n      });\n      if (toggle) favs.push(id);\n      this.favorites = favs;\n      this.updateCurrentChannel();\n      _store.set(\"favorites_data\", favs);\n    },\n\n    // close active audio\n    closeAudio: function closeAudio() {\n      _audio.stopAudio();\n      this.playing = false;\n    },\n\n    // setup animation canvas\n    setupCanvas: function setupCanvas() {\n      _scene.setupCanvas();\n    },\n\n    // audio visualizer animation loop\n    updateCanvas: function updateCanvas() {\n      this.anf = requestAnimationFrame(this.updateCanvas);\n      if (this.visible) {\n        var freq = _audio.getFreqData(this.playing);\n        _scene.updateObjects(freq);\n      }\n    },\n\n    // get stations data from api\n    getChannels: function getChannels(sidebar) {\n      var _this = this;\n\n      _soma.getChannels(function (err, stations) {\n        if (err) return _this.setError(\"stations\", err);\n        _this.stations = stations;\n        _this.clearError(\"stations\");\n        _this.updateCurrentChannel();\n        _this.applyRoute(window.location.hash, sidebar);\n      });\n    },\n\n    // get songs list for a station from api\n    getSongs: function getSongs(station, cb) {\n      var _this = this;\n\n      if (!station || !station.shortcode || !station.songsurl) {\n        return;\n      }if (!this.isCurrentChannel(station)) {\n        this.songs = [];this.track = {};this.image = {};\n      };\n\n      _soma.getSongs(station, function (err, songs) {\n        if (err) return _this.setError(\"songs\", err);\n        if (typeof cb === \"function\") cb(songs);\n        _this.track = songs.now_playing.song;\n        _this.songs = songs.song_history;\n        _this.image = songs.now_playing.song;\n        _this.clearError(\"songs\");\n        // console.log(\"DATA => \", this.songs);\n      });\n    },\n\n    // checks is a station is currently selected\n    isCurrentChannel: function isCurrentChannel(station) {\n      if (!station || !station.shortcode || !this.station.shortcode) {\n        return false;\n      }if (this.station.shortcode !== station.shortcode) {\n        return false;\n      }return true;\n    },\n\n    // update data for current selected channel\n    updateCurrentChannel: function updateCurrentChannel() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.stations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var c = _step.value;\n\n          // see if channel has been saved as a favorite\n          c.favorite = this.favorites.indexOf(c.shortcode) >= 0;\n          // see if channel is currently selected\n          if (this.isCurrentChannel(c)) {\n            this.station = Object.assign(this.station, c);\n            c.active = true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    },\n\n    // play audio stream for a station\n    playChannel: function playChannel(station) {\n      if (this.playing || !station || !station.mp3file) {\n        return;\n      }this.loading = true;\n      _audio.playSource(station.mp3file);\n      _audio.setVolume(this.volume);\n    },\n\n    // select a station to play\n    selectChannel: function selectChannel(station) {\n      var play = arguments[1] === undefined ? false : arguments[1];\n\n      if (!station || !station.shortcode) {\n        return;\n      }if (this.isCurrentChannel(station)) {\n        return;\n      }this.closeAudio();\n      this.toggleSidebar(false);\n      this.setRoute(station.route);\n      this.getSongs(station);\n      this.station = station;\n      // attempt to play only after user insteraction, triggered from clicking a station on the list\n      if (play) {\n        this.playChannel(station);\n      }\n    },\n\n    // set station route\n    setRoute: function setRoute(route) {\n      route = \"/\" + String(route || \"\").replace(/^[\\#\\/]+|[\\/]+$/g, \"\").trim();\n      window.location.hash = route;\n      this.route = route;\n    },\n\n    // parse url hash route actions\n    applyRoute: function applyRoute(route) {\n      var sidebar = arguments[1] === undefined ? false : arguments[1];\n\n      var data = String(route || \"\").replace(/^[\\#\\/]+|[\\/]+$/g, \"\").trim().split(\"/\");\n      var action = data.length ? data.shift() : \"\";\n      var param = data.length ? data.shift() : \"\";\n\n      // select a station from the url\n      if (action === \"station\" && param) {\n        var station = this.stations.filter(function (c) {\n          return c.shortcode === param;\n        }).shift();\n        if (station && station.shortcode) {\n          return this.selectChannel(station);\n        }\n      }\n      // nothing to do, reset player\n      this.closeAudio();\n      this.resetPlayer();\n      this.toggleSidebar(sidebar);\n    },\n\n    // on keyboard events\n    onKeyboard: function onKeyboard(e) {\n      var k = e.key || \"\";\n      if (k === \" \" && this.station.shortcode) {\n        return this.togglePlay();\n      }if (k === \"Enter\") {\n        return this.toggleSidebar(true);\n      }if (k === \"Escape\") {\n        return this.toggleSidebar(false);\n      }\n    },\n\n    // waiting for media to load\n    onWaiting: function onWaiting(e) {\n      var _this = this;\n\n      if (this.sto) clearInterval(this.sto);\n      this.sto = setTimeout(function () {\n        return _this.onError(e);\n      }, 10000);\n      this.playing = false;\n      this.loading = true;\n    },\n\n    // audio stream playing\n    onPlaying: function onPlaying(e) {\n      this.clearError(\"stream\");\n      this.playing = true;\n      this.loading = false;\n    },\n\n    // audio stream ended\n    onEnded: function onEnded(e) {\n      this.playing = false;\n      this.loading = false;\n    },\n\n    // error loading stream\n    onError: function onError(e) {\n      this.closeAudio();\n      this.setError(\"stream\", \"The selected stream (\" + this.station.title + \") could not load, or stopped loading due to network problems.\");\n      this.playing = false;\n      this.loading = false;\n    },\n\n    // start tracking playback time\n    startClock: function startClock() {\n      this.stopClock();\n      this.timeStart = Date.now();\n      this.timeItv = setInterval(this.updateClock, 1000);\n      this.updateClock();\n    },\n\n    // update tracking playback time\n    updateClock: function updateClock() {\n      var p = function (n) {\n        return n < 10 ? \"0\" + n : \"\" + n;\n      };\n      var elapsed = (Date.now() - this.timeStart) / 1000;\n      var seconds = Math.floor(elapsed % 60);\n      var minutes = Math.floor(elapsed / 60 % 60);\n      var hours = Math.floor(elapsed / 3600);\n      this.timeDisplay = p(hours) + \":\" + p(minutes) + \":\" + p(seconds);\n    },\n\n    // stop tracking playback time\n    stopClock: function stopClock() {\n      if (this.timeItv) clearInterval(this.timeItv);\n      this.timeItv = null;\n    },\n\n    // clear timer refs\n    clearTimers: function clearTimers() {\n      if (this.sto) clearTimeout(this.sto);\n      if (this.itv) clearInterval(this.itv);\n      if (this.anf) cancelAnimationFrame(this.anf);\n    },\n\n    // pass height property to css\n    setCssHeight: function setCssHeight(elm, height) {\n      elm.style.setProperty(\"--height\", \"\" + height + \"px\");\n    },\n\n    // keep track of window height\n    updateHeight: function updateHeight() {\n      var _this = this;\n\n      var root = document.querySelector(\":root\");\n      this.setCssHeight(root, window.innerHeight);\n      window.addEventListener(\"resize\", function (e) {\n        return _this.setCssHeight(root, window.innerHeight);\n      });\n    } },\n\n  // on app mounted\n  mounted: function mounted() {\n    this.loadSortOptions();\n    this.loadFavorites();\n    this.loadVolume();\n    this.setupEvents();\n    this.getChannels(true);\n    this.setupCanvas();\n    this.updateCanvas();\n    this.setupMaintenance();\n    this.updateHeight();\n    this.initPlayer();\n  },\n\n  // on app destroyed\n  destroyed: function destroyed() {\n    this.closeAudio();\n    this.clearTimers();\n  }\n});\n\n// ...\n\n//# sourceURL=webpack://soma-fm-player/./src/app.js?");

/***/ }),

/***/ "./src/js/audio.js":
/*!*************************!*\
  !*** ./src/js/audio.js ***!
  \*************************/
/***/ ((module) => {

eval("/**\n * Audio handler object\n */\n\n\nmodule.exports = {\n  mContext: null,\n  mAudio: null,\n  mSource: null,\n  mGain: null,\n  mAnalyser: null,\n  mFreq: new Uint8Array(32),\n  mHasfreq: false,\n  mCounter: 0,\n  mEvents: {},\n\n  // setup audio routing, called after user interaction, setup once\n  setupAudio: function setupAudio() {\n    var _this = this;\n\n    if (this.mAudio && this.mContext) {\n      return;\n    }this.mAudio = new Audio();\n    this.mContext = new (window.AudioContext || window.webkitAudioContext)();\n    this.mSource = this.mContext.createMediaElementSource(this.mAudio);\n    this.mAnalyser = this.mContext.createAnalyser();\n    this.mGain = this.mContext.createGain();\n\n    this.mAnalyser.fftSize = 32;\n    this.mSource.connect(this.mAnalyser);\n    this.mSource.connect(this.mGain);\n    this.mGain.connect(this.mContext.destination);\n\n    this.mAudio.addEventListener(\"canplay\", function (e) {\n      _this.mFreq = new Uint8Array(_this.mAnalyser.frequencyBinCount);\n      _this.mAudio.play();\n    });\n\n    [\"waiting\", \"playing\", \"ended\", \"stalled\", \"error\"].forEach(function (event) {\n      _this.mAudio.addEventListener(event, function (e) {\n        return _this.emit(event, e);\n      });\n    });\n  },\n\n  // add event listeners to the audio api\n  on: function on(event, callback) {\n    if (event && typeof callback === \"function\") {\n      this.mEvents[event] = callback;\n    }\n  },\n\n  // emit saved audio event\n  emit: function emit(event, data) {\n    if (event && this.mEvents.hasOwnProperty(event)) {\n      this.mEvents[event](data);\n    }\n  },\n\n  // update and return analyser frequency value (0-1) to control animations\n  getFreqData: function getFreqData(playing) {\n    if (!this.mAnalyser) {\n      return 0;\n    } // this is not working on some devices running safari\n    this.mAnalyser.getByteFrequencyData(this.mFreq);\n    var mFreq = Math.floor(this.mFreq[4] | 0) / 255;\n\n    // indicate that a freq value can be read\n    if (!this.mHasfreq && mFreq) {\n      this.mHasfreq = true;\n    }\n\n    // frequency data available\n    if (this.mHasfreq) {\n      return mFreq;\n    } // return fake counter if no freq data available (safari workaround)\n    if (playing) {\n      this.mCounter = this.mCounter < 0.6 ? this.mCounter + 0.01 : this.mCounter;\n    } else {\n      this.mCounter = this.mCounter > 0 ? this.mCounter - 0.01 : this.mCounter;\n    }\n    return this.mCounter;\n  },\n\n  // set audio volume\n  setVolume: function setVolume(volume) {\n    if (!this.mGain) {\n      return;\n    }volume = parseFloat(volume) || 0;\n    volume = volume > 1 ? volume / 100 : volume;\n    volume = volume > 1 ? 1 : volume;\n    volume = volume < 0 ? 0 : volume;\n    this.mAudio.muted = volume <= 0 ? true : false;\n    this.mGain.gain.value = volume;\n  },\n\n  // stop playing audio\n  stopAudio: function stopAudio() {\n    if (!this.mAudio) {\n      return;\n    }try {\n      this.mAudio.pause();\n    } catch (e) {}\n    try {\n      this.mAudio.stop();\n    } catch (e) {}\n    try {\n      this.mAudio.close();\n    } catch (e) {}\n  },\n\n  // play audio source url\n  playSource: function playSource(source) {\n    this.setupAudio();\n    this.stopAudio();\n\n    if (this.mContext.state === \"suspended\") {\n      this.mContext.resume().then(function () {\n        console.log(\"Audio context has been resumed.\");\n      });\n    }\n    this.mAudio.src = String(source || \"\") + \"?x=\" + Date.now();\n    this.mAudio.preload = \"metadata\";\n    this.mAudio.crossOrigin = \"anonymous\";\n    this.mAudio.autoplay = false;\n    this.mAudio.load();\n  } };\n\n//# sourceURL=webpack://soma-fm-player/./src/js/audio.js?");

/***/ }),

/***/ "./src/js/favorite.js":
/*!****************************!*\
  !*** ./src/js/favorite.js ***!
  \****************************/
/***/ (() => {

eval("/**\n * Vue component used to toggle channel favorite\n */\n\n\nVue.component(\"fav-btn\", {\n  props: {\n    id: { type: String, \"default\": \"\", required: true },\n    text: { type: String, \"default\": \"\", required: false },\n    active: { type: Boolean, \"default\": false } },\n  template: \"\\n    <button class=\\\"hover-text focus-text\\\" @click.stop=\\\"$emit( 'change', id, !active )\\\" title=\\\"Toggle save favorite station\\\">\\n      <span>\\n        <i v-if=\\\"active\\\" class=\\\"ico ico-favs-check text-primary fx fx-drop-in\\\" key=\\\"on\\\"></i>\\n        <i v-else class=\\\"ico ico-favs-add fx fx-drop-in\\\" key=\\\"off\\\"></i>\\n      </span>\\n      <span v-if=\\\"text\\\">&nbsp; {{ text }}</span>\\n    </button>\" });\n\n//# sourceURL=webpack://soma-fm-player/./src/js/favorite.js?");

/***/ }),

/***/ "./src/js/filters.js":
/*!***************************!*\
  !*** ./src/js/filters.js ***!
  \***************************/
/***/ (() => {

eval("/**\n * Vue custom filters\n */\n\n// comma separate long numerical values\n\n\nVue.filter(\"toCommas\", function (num, decimals) {\n  var o = { style: \"decimal\", minimumFractionDigits: decimals, maximumFractionDigits: decimals };\n  return new Intl.NumberFormat(\"en-US\", o).format(num);\n});\n\n// sanitize text data by only allowing alnums and some symbols\nVue.filter(\"toText\", function (str, def) {\n  str = String(str || \"\").replace(/[^\\w\\`\\'\\-\\,\\.\\!\\?]+/g, \" \").replace(/\\s\\s+/g, \" \").trim();\n  return str || String(def || \"\");\n});\n\n//# sourceURL=webpack://soma-fm-player/./src/js/filters.js?");

/***/ }),

/***/ "./src/js/scene.js":
/*!*************************!*\
  !*** ./src/js/scene.js ***!
  \*************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\n/**\n * ThreeJS scene handler\n */\n\nvar Sphere = _interopRequire(__webpack_require__(/*! ./sphere */ \"./src/js/sphere.js\"));\n\nmodule.exports = {\n  mWrap: null,\n  mCanvas: null,\n  mRenderer: null,\n  mScene: null,\n  mCamera: null,\n  mBox: null,\n  mMouse: { x: 0, y: 0 },\n  mObjects: [],\n\n  // setup animation canvas\n  setupCanvas: function setupCanvas() {\n    this.mWrap = document.querySelector(\"#player-wrap\");\n    this.mCanvas = document.querySelector(\"#player-canvas\");\n    this.mBox = this.mWrap.getBoundingClientRect();\n\n    // setup scene and renderer\n    this.mScene = new THREE.Scene();\n    this.mRenderer = new THREE.WebGLRenderer({ canvas: this.mCanvas, alpha: true, antialias: true, precision: \"lowp\" });\n    this.mRenderer.setClearColor(0, 0);\n    this.mRenderer.setPixelRatio(window.devicePixelRatio);\n\n    // setup camera\n    this.mCamera = new THREE.PerspectiveCamera(60, this.mBox.width / this.mBox.height, 0.1, 20000);\n    this.mCamera.lookAt(this.mScene.position);\n    this.mCamera.position.set(0, 0, 300);\n    this.mCamera.rotation.set(0, 0, 0);\n\n    // add and create objects\n    this.mObjects.push(Sphere);\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = this.mObjects[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var o = _step.value;\n\n        o.create(this.mBox, this.mScene);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n          _iterator[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    // setup events\n    window.addEventListener(\"mousemove\", this.updateMouse.bind(this));\n    window.addEventListener(\"resize\", this.updateSize.bind(this));\n    this.updateMouse();\n    this.updateSize();\n  },\n\n  // update custom objects in 3d scene\n  updateObjects: function updateObjects(freq) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = this.mObjects[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var o = _step.value;\n\n        o.update(this.mBox, this.mMouse, freq);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n          _iterator[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    this.mRenderer.render(this.mScene, this.mCamera);\n  },\n\n  // update canvas size\n  updateSize: function updateSize() {\n    if (!this.mWrap || !this.mCanvas) {\n      return;\n    }this.mBox = this.mWrap.getBoundingClientRect();\n    this.mCanvas.width = this.mBox.width;\n    this.mCanvas.height = this.mBox.height;\n    this.mCamera.aspect = this.mBox.width / this.mBox.height;\n    this.mCamera.updateProjectionMatrix();\n    this.mRenderer.setSize(this.mBox.width, this.mBox.height);\n  },\n\n  // update mouse position from center of canvas\n  updateMouse: function updateMouse(e) {\n    if (!this.mBox) {\n      return;\n    }var centerX = this.mBox.left + this.mBox.width / 2;\n    var centerY = this.mBox.top + this.mBox.height / 2;\n\n    if (e) {\n      this.mMouse.x = Math.max(0, e.pageX || e.clientX || 0) - centerX;\n      this.mMouse.y = Math.max(0, e.pageY || e.clientY || 0) - centerY;\n    } else {\n      this.mMouse.x = centerX;\n      this.mMouse.y = centerY;\n    }\n  } };\n\n//# sourceURL=webpack://soma-fm-player/./src/js/scene.js?");

/***/ }),

/***/ "./src/js/soma.js":
/*!************************!*\
  !*** ./src/js/soma.js ***!
  \************************/
/***/ ((module) => {

eval("/**\n * Soma-FM API handler\n */\n\n\nvar API = \"https://stream.cloudmu.id/api\";\n\nmodule.exports = {\n\n  // get station data from api\n  getChannels: function getChannels(callback) {\n    var _this = this;\n\n    var apiurl = API + \"/stations\";\n    var error = \"There was a problem fetching the latest list of music channels from AzuraCast.\";\n\n    axios.get(apiurl).then(function (res) {\n      var list = _this._parseChannels(res.data);\n      if (!list.length) return callback(error, []);\n      return callback(null, list);\n    })[\"catch\"](function (e) {\n      return callback(error + String(e.message || \"\"), []);\n    });\n  },\n\n  // fetch songs for a channel\n  getSongs: function getSongs(channel, callback) {\n    var apiurl = channel.songsurl || \"\";\n    var title = channel.name || \"...\";\n    var error = \"There was a problem loading the list of songs for channel \" + title + \" from AzuraCast.\";\n\n    axios.get(apiurl).then(function (res) {\n      if (!res.data) return callback(error, []);\n      return callback(null, res.data);\n    })[\"catch\"](function (e) {\n      return callback(error + String(e.message || \"\"), []);\n    });\n  },\n\n  // parse station list from api response\n  _parseChannels: function _parseChannels(station) {\n    var output = [];\n    if (Array.isArray(station)) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = station[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var c = _step.value;\n\n          c.plsfile = c.playlist_pls_url;\n          c.mp3file = c.listen_url;\n          c.songsurl = API + \"/nowplaying/\" + c.id;\n          c.image = \"/public/img/\" + c.shortcode + \".png\";\n          c.infourl = c.url;\n          c.twitter = c.twitter ? \"https://twitter.com/@\" + c.twitter : \"\";\n          c.route = \"/station/\" + c.shortcode;\n          c.listeners = c.mounts[0].listeners.current | 0;\n          c.updated = c.updated | 0;\n          c.favorite = false;\n          c.active = false;\n          output.push(c);\n          // console.log(\"DATA => \"+c.image);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n    return output;\n  } };\n\n//# sourceURL=webpack://soma-fm-player/./src/js/soma.js?");

/***/ }),

/***/ "./src/js/sphere.js":
/*!**************************!*\
  !*** ./src/js/sphere.js ***!
  \**************************/
/***/ ((module) => {

eval("/**\n * ThreeJS scene sphere object\n */\n\n\nmodule.exports = {\n  group: null,\n  shapes: [],\n  move: new THREE.Vector3(0, 0, 0),\n  touch: false,\n  ease: 8,\n\n  // create and add sphere to scene\n  create: function create(box, scene) {\n    this.group = new THREE.Object3D();\n    var shape1 = new THREE.CircleGeometry(1, 10);\n    var shape2 = new THREE.CircleGeometry(2, 20);\n    var points = new THREE.SphereGeometry(100, 30, 14).vertices;\n    var material = new THREE.MeshNormalMaterial({ transparent: true, opacity: 0, side: THREE.DoubleSide });\n    var center = new THREE.Vector3(0, 0, 0);\n    var radius = 12;\n\n    for (var i = 0; i < points.length; i++) {\n      var _points$i = points[i];\n      var x = _points$i.x;\n      var y = _points$i.y;\n      var z = _points$i.z;\n\n      var home = { x: x, y: y, z: z };\n      var cycle = THREE.Math.randInt(0, 100);\n      var pace = THREE.Math.randInt(10, 30);\n      var shape = new THREE.Mesh(i % 2 ? shape1 : shape2, material);\n\n      shape.position.set(x, y, z);\n      shape.lookAt(center);\n      shape.userData = { radius: radius, cycle: cycle, pace: pace, home: home };\n      this.group.add(shape);\n    }\n    this.touch = \"ontouchstart\" in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;\n    this.group.position.set(40, 5, 0);\n    this.group.rotation.x = Math.PI / 2 + 0.6;\n    scene.add(this.group);\n  },\n\n  // animate sphere on frame loop\n  update: function update(box, mouse, freq) {\n    var xoff = box.width < 800 ? 0 : 40;\n    var zoff = box.width < 800 ? -60 : 20;\n    var zmod = 0.5 + 0.5 * freq;\n\n    // prevent sphere from moving left/right on touch devices\n    if (this.touch) {\n      this.group.position.x = xoff;\n    } else {\n      this.move.x = xoff + -(mouse.x * 0.012);\n      this.group.position.x += (this.move.x - this.group.position.x) / this.ease;\n      this.group.position.y += (this.move.y - this.group.position.y) / this.ease;\n    }\n    // move on z-axis with music data and rotate\n    this.group.position.z = zoff + 80 * freq;\n    this.group.rotation.y -= 0.003;\n\n    // adjust individual sphere points\n    for (var i = 0; i < this.group.children.length; i++) {\n      var shape = this.group.children[i];\n      var _shape$userData = shape.userData;\n      var radius = _shape$userData.radius;\n      var cycle = _shape$userData.cycle;\n      var pace = _shape$userData.pace;\n      var home = _shape$userData.home;\n\n      shape.material.opacity = 0.2 + 0.8 * freq;\n      shape.position.set(home.x, home.y, home.z);\n      shape.translateZ(zmod * Math.sin(cycle / pace) * radius);\n      shape.userData.cycle++;\n    }\n  } };\n\n//# sourceURL=webpack://soma-fm-player/./src/js/sphere.js?");

/***/ }),

/***/ "./src/js/store.js":
/*!*************************!*\
  !*** ./src/js/store.js ***!
  \*************************/
/***/ ((module) => {

eval("/**\n * Basic localStorage wrapper\n */\n\n\nmodule.exports = {\n\n  // save data\n  set: function set(key, data, ttl) {\n    if (!this._isStr(key)) {\n      return;\n    }var time = Date.now();\n    var expire = Number(ttl) || 0;\n    var json = JSON.stringify({ time: time, expire: expire, data: data });\n    window.localStorage.setItem(key, json);\n  },\n\n  // get saved data\n  get: function get(key) {\n    if (!this._isStr(key)) {\n      return;\n    }var json = window.localStorage.getItem(key) || \"{}\";\n    var parsed = JSON.parse(json) || {};\n    var time = parsed.time;\n    var expire = parsed.expire;\n    var data = parsed.data;\n\n    if (this._isExpired(time, expire)) this[\"delete\"](key);\n    return data;\n  },\n\n  // remove saved data\n  \"delete\": function _delete(key) {\n    if (!this._isStr(key)) {\n      return;\n    }window.localStorage.removeItem(key);\n  },\n\n  // check valid string\n  _isStr: function _isStr(str) {\n    return str && typeof str === \"string\";\n  },\n\n  // check if data saved has expired\n  _isExpired: function _isExpired(time, expire) {\n    if (!time || !expire) {\n      return false;\n    }var now = Date.now();\n    var secs = (now - time) / 1000;\n    return secs >= expire ? true : false;\n  }\n};\n\n//# sourceURL=webpack://soma-fm-player/./src/js/store.js?");

/***/ }),

/***/ "./src/js/utils.js":
/*!*************************!*\
  !*** ./src/js/utils.js ***!
  \*************************/
/***/ ((module) => {

eval("/**\n * Common utils\n */\n\n\nmodule.exports = {\n\n  // get search results off a list for an obj key\n  search: (function (_search) {\n    var _searchWrapper = function search(_x, _x2, _x3) {\n      return _search.apply(this, arguments);\n    };\n\n    _searchWrapper.toString = function () {\n      return _search.toString();\n    };\n\n    return _searchWrapper;\n  })(function (list, key, search) {\n    var regxp = new RegExp(\"^(\" + search + \")\", \"i\");\n    return list.filter(function (item) {\n      return regxp.test(item[key]);\n    });\n  }),\n\n  // sort objects in an array by a key\n  sort: function sort(list, key, order, ignore) {\n    return list.sort(function (a, b) {\n      if (a.hasOwnProperty(key)) {\n\n        var _a = a[key];\n        var _b = b[key];\n\n        if (ignore) {\n          // sort strings using same case\n          _a = typeof _a === \"string\" ? _a.toUpperCase() : _a;\n          _b = typeof _b === \"string\" ? _b.toUpperCase() : _b;\n        }\n        if (order === \"asc\") {\n          if (_a < _b) return -1;\n          if (_a > _b) return 1;\n        }\n        if (order === \"desc\") {\n          if (_a > _b) return -1;\n          if (_a < _b) return 1;\n        }\n      }\n      return 0;\n    });\n  } };\n\n//# sourceURL=webpack://soma-fm-player/./src/js/utils.js?");

/***/ }),

/***/ "./src/scss/app.scss":
/*!***************************!*\
  !*** ./src/scss/app.scss ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://soma-fm-player/./src/scss/app.scss?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/app.js");
/******/ 	
/******/ })()
;